cat << CTAG
{
    name:Advanced,
    elements:[
      { SPane:{
		title:"Low Memory Killer",
		description:"LMK Minfree controls how much memory each app type can hold, and is responsible for memory management for multitasking; all values are multiplied by 256 pages."
      }},
`
	for LMK in 1 2 3 4 5 6; do
		echo '{ SSeekBar:{ '
			case $LMK in
			1)
				echo 'title:"Foreground App"' ;;
			2)
				echo 'title:"Visible App"' ;;
			3)
				echo 'title:"Secondary Server"' ;;
			4)
				echo 'title:"Hidden App"' ;;
			5)
				echo 'title:"Content Provider"' ;;
			6)
				echo 'title:"Empty App"' ;;
			esac
			echo ', action:"minfree '${LMK}'",
			min:10, max:200 }},'
	done
`
      { SPane:{
		title:"LMK Whitelist",
		description:"Allows certain apps to be exempt from being killed until absolutely necessary to avoid out-of-memory (OOM)."
      }},
	{ SCheckBox:{
                label:"Do-Not-Kill System Processes List",
                default:`cat /sys/module/lowmemorykiller/parameters/donotkill_sysproc`,
                action:"generic /sys/module/lowmemorykiller/parameters/donotkill_sysproc"
        }},
	{ SOptionList:{
		title:"Exempt System Processes",
		action:"whitelist set sys",
		default:`/res/synapse/actions/whitelist set sys`,
		values:[
`
			for SYSPROC in \`/res/synapse/actions/whitelist list sys\`; do
			  echo "\"$SYSPROC\","
			done
`
		]
	}},
	{ SCheckBox:{
                label:"Do-Not-Kill User Processes List",
                default:`cat /sys/module/lowmemorykiller/parameters/donotkill_proc`,
                action:"generic /sys/module/lowmemorykiller/parameters/donotkill_proc"
        }},
	{ SOptionList:{
		title:"Exempt User Processes",
		action:"whitelist set user",
		default:`/res/synapse/actions/whitelist set user`,
 		values:[
`
			for PROC in \`/res/synapse/actions/whitelist list user\`; do
			  echo "\"$PROC\","
			done
`
		]
	}},
      { SDescription:{
        description:"The process lists above are view only. To add processes, check the Synapse sdcard folder for the parsed files and add one process name per line. Lists updated on reboot.",
      }},
      { SPane:{
		title:"Kernel Entropy"
      }},
	{ SLiveLabel:{
		title:"Entropy Available",
		refresh:1000,
		action:"live entropy"
	}},
	{ SSeekBar:{
		title:"Read Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/read_wakeup_threshold`,
				action:"generic /proc/sys/kernel/random/read_wakeup_threshold"
	}},
	{ SSeekBar:{
		title:"Write Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/write_wakeup_threshold`,
				action:"generic /proc/sys/kernel/random/write_wakeup_threshold"
	}},
      { SPane:{
		title:"Kernel Sched"
      }},
	{ SSeekBar:{
		title:"Latency",
		max:20000000, min:1000000, step:100000, unit:" ns",
		default:`cat /proc/sys/kernel/sched_latency_ns`,
				action:"generic /proc/sys/kernel/sched_latency_ns"
	}},
	{ SSeekBar:{
		title:"Min Granularity",
		max:20000000, min:1000000, step:100000, unit:" ns",
		default:`cat /proc/sys/kernel/sched_min_granularity_ns`,
				action:"generic /proc/sys/kernel/sched_min_granularity_ns"
	}},
	{ SSeekBar:{
		title:"NR Migrate",
		max:96, min:8, step:8,
		default:`cat /proc/sys/kernel/sched_nr_migrate`,
				action:"generic /proc/sys/kernel/sched_nr_migrate"
	}},
	{ SSeekBar:{
		title:"RT Period",
		max:2000000, min:10000, step:10000, unit:" us",
		default:`cat /proc/sys/kernel/sched_rt_period_us`,
				action:"generic /proc/sys/kernel/sched_rt_period_us"
	}},
	{ SSeekBar:{
		title:"RT Runtime",
		max:2000000, min:10000, step:10000, unit:" us",
		default:`cat /proc/sys/kernel/sched_rt_runtime_us`,
				action:"generic /proc/sys/kernel/sched_rt_runtime_us"
	}},
	{ SSeekBar:{
		title:"Shares Window",
		max:20000000, min:5000000, step:1000000, unit:" ns",
		default:`cat /proc/sys/kernel/sched_shares_window`,
				action:"generic /proc/sys/kernel/sched_shares_window"
	}},
	{ SSeekBar:{
		title:"Time Average",
		max:2000, min:100, step:100, unit:" ns",
		default:`cat /proc/sys/kernel/sched_time_avg`,
				action:"generic /proc/sys/kernel/sched_time_avg"
	}},
	{ SSeekBar:{
		title:"Wakeup Granularity",
		max:20000000, min:1000000, step:100000, unit:" ns",
		default:`cat /proc/sys/kernel/sched_wakeup_granularity_ns`,
				action:"generic /proc/sys/kernel/sched_wakeup_granularity_ns"
	}},
	{ SCheckBox:{
                label:"Autogroup",
                default:`cat /proc/sys/kernel/sched_autogroup_enabled`,
                action:"generic /proc/sys/kernel/sched_autogroup_enabled"
        }},
	{ SCheckBox:{
                label:"Child Runs First",
                default:`cat /proc/sys/kernel/sched_child_runs_first`,
                action:"generic /proc/sys/kernel/sched_child_runs_first"
        }},
	{ SCheckBox:{
                label:"Tunable Scaling",
                default:`cat /proc/sys/kernel/sched_tunable_scaling`,
                action:"generic /proc/sys/kernel/sched_tunable_scaling"
        }},
      { SPane:{
		title:"Other"
      }},
	{ SSeekBar:{
		title:"Randomize VA Space", max:2,
		default:`cat /proc/sys/kernel/randomize_va_space`,
				action:"generic /proc/sys/kernel/randomize_va_space"
	}},
	{ SSeekBar:{
		title:"FileSystem Lease Break Time",
		max:100, min:1, unit:" s",
		default:`cat /proc/sys/fs/lease-break-time`,
				action:"generic /proc/sys/fs/lease-break-time"
	}},
      { SPane:{
		title:"Kernel Samepage Merging"
      }},
	{ SCheckBox:{
                description:"KSM combines duplicate memory pages of different processes to possibly improve usage/performance of system memory.",
                label:"Kernel Samepage Merging",
                default:`cat /sys/kernel/mm/ksm/run`,
                action:"generic /sys/kernel/mm/ksm/run"
        }},
	{ SSeekBar:{
		title:"Pages To Scan",
		max:500, min:10, step:10,
		default:`cat /sys/kernel/mm/ksm/pages_to_scan`,
				action:"generic /sys/kernel/mm/ksm/pages_to_scan"
	}},
	{ SSeekBar:{
		title:"Sleep",
		max:2000, min:50, step:50, unit:" ms",
		default:`cat /sys/kernel/mm/ksm/sleep_millisecs`,
				action:"generic /sys/kernel/mm/ksm/sleep_millisecs"
	}},
    ]
}
CTAG
